[
  {
    "objectID": "types.html",
    "href": "types.html",
    "title": "Types",
    "section": "",
    "text": "source\n\nSpectraData\n\n SpectraData (wavenumbers:numpy.ndarray, spectra:numpy.ndarray,\n              measurement_type:str, sample_ids:numpy.ndarray)\n\n\n\nExported source\nfrom dataclasses import dataclass\nimport numpy as np\n\n\n\n\nExported source\n@dataclass\nclass SpectraData:\n    wavenumbers: np.ndarray\n    spectra: np.ndarray\n    measurement_type: str\n    sample_ids: np.ndarray  # Adding sample IDs to maintain relationships\n    \n    def __str__(self):\n        \"\"\"Pretty print the SpectraData object\"\"\"\n        sections = [\n            (\"SpectraData attributes\", f\"Available attributes: {', '.join(vars(self).keys())}\"),\n            \n            (\"Wavenumbers\", \n             f\"{np.array2string(self.wavenumbers[:10], precision=2, separator=', ')}\\n\"\n             f\"Shape: {self.wavenumbers.shape}\"),\n            \n            (\"Spectra\", \n             f\"{np.array2string(self.spectra[:5,:5], precision=4, separator=', ')}\\n\"\n             f\"Shape: {self.spectra.shape}\"),\n            \n            (\"Measurement type (Reflectance or Absorbance)\", self.measurement_type),\n            \n            (\"Sample IDs\", \n             f\"{np.array2string(self.sample_ids[:10], separator=', ')}\\n\"\n             f\"Total samples: {len(self.sample_ids)}\")\n        ]\n        \n        return '\\n\\n'.join(f\"{title}:\\n{'-'*len(title)}\\n{content}\" \n                          for title, content in sections)",
    "crumbs": [
      "Source",
      "Types"
    ]
  },
  {
    "objectID": "datasets.ossl.html",
    "href": "datasets.ossl.html",
    "title": "OSSL datasets",
    "section": "",
    "text": "The official OSSL documentation provides more details on the dataset and its variables.\n\nsource\n\nOSSLData\n\n OSSLData (df:pandas.core.frame.DataFrame)\n\nOSSL (Open Soil Spectral Library) data container\n\n\n\n\nType\nDetails\n\n\n\n\ndf\nDataFrame\ndataframe containing OSSL data\n\n\n\n\nsource\n\n\nOSSLData._parse_columns\n\n OSSLData._parse_columns ()\n\nParse columns into visnir, mir and properties\n\nsource\n\n\nget_cache_path\n\n get_cache_path (dest_dir:str='.soilspecdata')\n\nGet cache path for OSSL data\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndest_dir\nstr\n.soilspecdata\nName of the cache directory\n\n\nReturns\nPath\n\nPath to the cache directory (~/dest_dir)\n\n\n\nFor instance:\n\nget_cache_path()\n\nPath('/Users/franckalbinet/.soilspecdata')\n\n\nThe default gzipped file is downloaded from the following URL: https://storage.googleapis.com/soilspec4gg-public/ossl_all_L0_v1.2.csv.gz\n\nsource\n\n\nget_ossl\n\n get_ossl (url='https://storage.googleapis.com/soilspec4gg-\n           public/ossl_all_L0_v1.2.csv.gz', force_download=False)\n\nLoad OSSL data from cache or download it\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nurl\nstr\nhttps://storage.googleapis.com/soilspec4gg-public/ossl_all_L0_v1.2.csv.gz\nOSSL data gzipped file URL\n\n\nforce_download\nbool\nFalse\nif True, force download\n\n\n\nHow to use it:\n\nossl = get_ossl(force_download=False)\n\n\nossl.visnir_cols[:2], ossl.mir_cols[:2], ossl.properties_cols[:2]\n\n(['scan_visnir.350_ref', 'scan_visnir.352_ref'],\n ['scan_mir.600_abs', 'scan_mir.602_abs'],\n ['dataset.code_ascii_txt', 'id.layer_local_c'])\n\n\n\nsource\n\n\nOSSLData._get_valid_spectra_mask\n\n OSSLData._get_valid_spectra_mask (spectra_cols:List[str])\n\nReturn mask for samples with all non-null values in spectra\n\n\n\n\nType\nDetails\n\n\n\n\nspectra_cols\nList\nSpectra column names\n\n\nReturns\nndarray\nMask\n\n\n\nOSSL gzip archive is formated in a wide format (with metadata, soil properties, visnir and mir spectra as columns). Note that all samples have not been scanned simultaneously with VisNIR and MIR instruments according to the data source/provider.\nAs a result, when selecting a subset of columns, e.g. ossl.mir_cols, the returned dataframe will have a lot of missing values (NaN). The above function return a mask for samples with all non-null values in spectra.\n\nossl.df[ossl.mir_cols]\n\n\n\n\n\n\n\n\nscan_mir.600_abs\nscan_mir.602_abs\nscan_mir.604_abs\nscan_mir.606_abs\nscan_mir.608_abs\nscan_mir.610_abs\nscan_mir.612_abs\nscan_mir.614_abs\nscan_mir.616_abs\nscan_mir.618_abs\n...\nscan_mir.3982_abs\nscan_mir.3984_abs\nscan_mir.3986_abs\nscan_mir.3988_abs\nscan_mir.3990_abs\nscan_mir.3992_abs\nscan_mir.3994_abs\nscan_mir.3996_abs\nscan_mir.3998_abs\nscan_mir.4000_abs\n\n\n\n\n0\n1.527853\n1.531908\n1.532084\n1.530892\n1.530645\n1.531506\n1.531582\n1.531413\n1.532904\n1.535459\n...\n0.356776\n0.356642\n0.355784\n0.354743\n0.354104\n0.353663\n0.353237\n0.352923\n0.352548\n0.352053\n\n\n1\n1.538449\n1.543622\n1.545751\n1.546997\n1.549450\n1.553714\n1.557981\n1.561652\n1.566082\n1.571555\n...\n0.358399\n0.358142\n0.357144\n0.355980\n0.355242\n0.354722\n0.354217\n0.353825\n0.353376\n0.352798\n\n\n2\n1.619721\n1.614226\n1.615612\n1.620649\n1.626406\n1.631747\n1.636411\n1.639527\n1.642449\n1.646890\n...\n0.372522\n0.372338\n0.371425\n0.370337\n0.369679\n0.369245\n0.368808\n0.368469\n0.368084\n0.367563\n\n\n3\n1.570129\n1.567954\n1.573055\n1.580834\n1.586880\n1.590397\n1.595117\n1.600492\n1.603847\n1.606447\n...\n0.357992\n0.357734\n0.356713\n0.355480\n0.354681\n0.354137\n0.353619\n0.353217\n0.352756\n0.352158\n\n\n4\n1.484832\n1.484367\n1.484977\n1.486258\n1.488400\n1.492040\n1.495075\n1.496595\n1.498354\n1.501437\n...\n0.316249\n0.316089\n0.315098\n0.313910\n0.313210\n0.312758\n0.312312\n0.311971\n0.311568\n0.311044\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n135646\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n135647\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n135648\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n135649\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n135650\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n135651 rows × 1701 columns\n\n\n\n\nmask = ossl.df[ossl.mir_cols].notna().all(axis=1)\nprint(mask.sum(), 'samples with all non-null values in mir spectra out of the total', len(mask))\n\n85684 samples with all non-null values in mir spectra out of the total 135651\n\n\n\nsource\n\n\nOSSLData._extract_wavenumbers\n\n OSSLData._extract_wavenumbers (cols:List[str])\n\nExtract wavenumbers from spectral column names\n\n\n\n\nType\nDetails\n\n\n\n\ncols\nList\ncolumn names\n\n\n\nFor instance, to retrieve the wavenumbers from the MIR columns:\n\nossl._extract_wavenumbers(ossl.mir_cols)\n\narray([ 600,  602,  604, ..., 3996, 3998, 4000], shape=(1701,))\n\n\n\nsource\n\n\nOSSLData._extract_measurement_type\n\n OSSLData._extract_measurement_type (cols:List[str])\n\nExtract measurement type from column names\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ncols\nList\nSpectral column names\n\n\nReturns\nstr\nabs (Absorbance) or ref (Reflectance)\n\n\n\nFor instance, to retrieve the measurement type from the MIR or VISNIR columns:\n\nossl._extract_measurement_type(ossl.visnir_cols), ossl._extract_measurement_type(ossl.mir_cols)\n\n('ref', 'abs')\n\n\n\nsource\n\n\nOSSLData._filter_wavelength_range\n\n OSSLData._filter_wavelength_range (wavenumbers:numpy.ndarray,\n                                    spectra:numpy.ndarray, cols:List[str],\n                                    wmin:Optional[int]=None,\n                                    wmax:Optional[int]=None)\n\nFilter spectra based on wavenumber range\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwavenumbers\nndarray\n\nWavenumbers\n\n\nspectra\nndarray\n\nSpectra\n\n\ncols\nList\n\nColumn names\n\n\nwmin\nOptional\nNone\nMin wavenumber\n\n\nwmax\nOptional\nNone\nMax wavenumber\n\n\nReturns\nTuple\n\nFiltered wavenumbers, spectra, columns\n\n\n\n\nwavenumbers, spectra, cols = ossl._filter_wavelength_range(\n    wavenumbers=ossl._extract_wavenumbers(ossl.visnir_cols), \n    spectra=ossl.df[ossl.visnir_cols].values, \n    cols=ossl.visnir_cols, \n    wmin=4000, wmax=25000\n)\n\nprint(f'Original wavenumbers: {ossl._extract_wavenumbers(ossl.visnir_cols).min()} - {ossl._extract_wavenumbers(ossl.visnir_cols).max()}')\nprint(f'Filtered wavenumbers: {wavenumbers.min()} - {wavenumbers.max()}')\nprint(f'Spectra shape: {spectra.shape}')\nprint(f'Filtered columns. From: {cols[0]} to: {cols[-1]}')\n\nOriginal wavenumbers: 4000 - 28571\nFiltered wavenumbers: 4000 - 25000\nSpectra shape: (135651, 1051)\nFiltered columns. From: scan_visnir.400_ref to: scan_visnir.2500_ref\n\n\nIMPORTANT: Not that by default, both VISNIR and MIR spectra are converted to wavenumbers.\n\nsource\n\n\nOSSLData.get_visnir\n\n OSSLData.get_visnir (wmin:Optional[int]=4000, wmax:Optional[int]=25000)\n\nGet VISNIR spectra within specified wavenumber range\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwmin\nOptional\n4000\nMin wavenumber\n\n\nwmax\nOptional\n25000\nMax wavenumber\n\n\nReturns\nSpectraData\n\nVISNIR data\n\n\n\nFor instance, to retrieve the VISNIR spectra between 8000 and 25000 wavenumbers:\n\nvisnir_data = ossl.get_visnir(wmin=8000, wmax=25000)\nvisnir_data.spectra.shape\n\n(64644, 426)\n\n\n\nsource\n\n\nOSSLData.get_mir\n\n OSSLData.get_mir (wmin:Optional[int]=600, wmax:Optional[int]=4000)\n\nGet MIR spectra within specified wavenumber range\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nwmin\nOptional\n600\nMin wavenumber\n\n\nwmax\nOptional\n4000\nMax wavenumber\n\n\nReturns\nSpectraData\n\nMIR data\n\n\n\nFor instance, to retrieve the MIR spectra between 600 and 4000 wavenumbers (default range):\n\nmir_data = ossl.get_mir()\nmir_data.spectra.shape, mir_data.wavenumbers.min(), mir_data.wavenumbers.max()\n\n((85684, 1701), np.int64(600), np.int64(4000))\n\n\n\nsource\n\n\nOSSLData.get_properties\n\n OSSLData.get_properties (properties=None, require_complete:bool=False)\n\nGet properties data with sample IDs\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nproperties\nNoneType\nNone\nProperties\n\n\nrequire_complete\nbool\nFalse\nif True, only return samples with no null values\n\n\nReturns\nDataFrame\n\nSelected properties data\n\n\n\nGet only complete MIR spectra:\n\nmir_data = ossl.get_mir()\n\nGet properties needed as ML targets (must be complete):\n\ntargets = ossl.get_properties(['cec_usda.a723_cmolc.kg'], require_complete=True)\ntargets.shape, targets.head()\n\n((57064, 1),\n         cec_usda.a723_cmolc.kg\n id                            \n S40857                6.633217\n S40858                3.822628\n S40859                3.427324\n S40860                1.906545\n S40861               13.403203)\n\n\nGet optional metadata (can have NaN values):\n\nmetadata = ossl.get_properties(['longitude.point_wgs84_dd', 'latitude.point_wgs84_dd'], require_complete=False)\nmetadata.shape, metadata.head()\n\n((135651, 2),\n            longitude.point_wgs84_dd  latitude.point_wgs84_dd\n id                                                          \n icr072246                 15.687492                -7.377750\n icr072247                 15.687492                -7.377750\n icr072266                 15.687817                -7.351243\n icr072267                 15.687817                -7.351243\n icr072286                 15.687965                -7.331673)\n\n\n\nsource\n\n\nOSSLData.get_aligned_data\n\n OSSLData.get_aligned_data (spectra_data:soilspecdata.types.SpectraData,\n                            target_cols:Union[str,List[str]])\n\nGet aligned spectra and target data for ML, along with their sample IDs\n\n\n\n\nType\nDetails\n\n\n\n\nspectra_data\nSpectraData\nSpectra data\n\n\ntarget_cols\nUnion\nTarget columns\n\n\nReturns\nTuple\nAligned spectra, targets, sample IDs\n\n\n\nFor instance, to retrieve the MIR spectra and the corresponding CEC values in an amenable form for a Machine/Deep Learning pipeline:\n\nX, y, ids = ossl.get_aligned_data(\n    spectra_data=mir_data,\n    target_cols='cec_usda.a723_cmolc.kg'\n)\n\nX.shape, y.shape, ids.shape\n\n((3, 3), (3, 1), (3,))\n\n\nLater, if you need metadata for these samples:\n\nmetadata = ossl.get_properties(['longitude.point_wgs84_dd', 'latitude.point_wgs84_dd']).loc[ids]\nmetadata.head()\n\n\n\n\n\n\n\n\nlongitude.point_wgs84_dd\nlatitude.point_wgs84_dd\n\n\nid\n\n\n\n\n\n\n173693\nNaN\nNaN\n\n\n172161\n-120.354407\n42.207350\n\n\n181527\n-107.274835\n47.434481\n\n\n176683\nNaN\nNaN\n\n\n212508\n-103.316306\n46.488522",
    "crumbs": [
      "Source",
      "OSSL datasets"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "SoilSpecData",
    "section": "",
    "text": "A Python package for handling soil spectroscopy data, with a focus on the Open Soil Spectral Library (OSSL).",
    "crumbs": [
      "SoilSpecData"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "SoilSpecData",
    "section": "Installation",
    "text": "Installation\npip install -U soilspecdata\nThe -U flag is used to update the package to the latest version. This is important to ensure that you have the latest features and bug fixes.\nIf you want to install the development version, run in the project root:\npip install -e .[dev]",
    "crumbs": [
      "SoilSpecData"
    ]
  },
  {
    "objectID": "index.html#features",
    "href": "index.html#features",
    "title": "SoilSpecData",
    "section": "Features",
    "text": "Features\n\nEasy loading and handling of OSSL dataset\nSupport for both VISNIR (Visible Near-Infrared) and MIR (Mid-Infrared) spectral data\nFlexible wavenumber range filtering\nConvenient access to soil properties and metadata\nAutomatic caching of downloaded data\nGet aligned spectra and target variable(s)\nFurther datasets to come …",
    "crumbs": [
      "SoilSpecData"
    ]
  },
  {
    "objectID": "index.html#quick-start",
    "href": "index.html#quick-start",
    "title": "SoilSpecData",
    "section": "Quick Start",
    "text": "Quick Start\n\n# Import the package\nfrom soilspecdata.datasets.ossl import get_ossl\n\n\nLoad OSSL dataset\n\nossl = get_ossl()\n\nThe spectral analysis covers both MIR (400-4000 cm⁻¹) and VISNIR (4000-28571 cm⁻¹) regions, with data reported in increasing wavenumbers for consistency across the entire spectral range.\nRanges of interest can further be filtered using the wmin and wmax parameters in the get_mir and get_visnir methods.\n\n\nMIR spectra\n\nmir_data = ossl.get_mir()\n\n\n\nVISNIR spectra\nUsing custom wavenumber range:\n\nvisnir_data = ossl.get_visnir(wmin=4000, wmax=25000)\n\n\n\nVISNIR | MIR dataclass member variables\n\nprint(visnir_data)\n\nSpectraData attributes:\n----------------------\nAvailable attributes: wavenumbers, spectra, measurement_type, sample_ids\n\nWavenumbers:\n-----------\n[4000, 4003, 4006, 4009, 4012, 4016, 4019, 4022, 4025, 4029]\nShape: (1051,)\n\nSpectra:\n-------\n[[0.3859, 0.3819, 0.3792, 0.3776, 0.3769],\n [0.3429, 0.3419, 0.3414, 0.3413, 0.3415],\n [0.3425, 0.3384, 0.3354, 0.3334, 0.3323],\n [0.2745, 0.2754, 0.2759, 0.2761, 0.276 ],\n [0.285 , 0.2794, 0.2755, 0.273 , 0.2718]]\nShape: (64644, 1051)\n\nMeasurement type (Reflectance or Absorbance):\n--------------------------------------------\nref\n\nSample IDs:\n----------\n['FS15R_FS4068', 'FS15R_FS4069', 'FS15R_FS4070', 'FS15R_FS4071',\n 'FS15R_FS4072', 'FS15R_FS4073', 'FS15R_FS4074', 'FS15R_FS4075',\n 'FS15R_FS4076', 'FS15R_FS4077']\nTotal samples: 64644\n\n\n\n\nGetting soil properties and other metadata\nExample: get Cation Exchange Capacity (CEC) measurements (in cmolc/kg) for all samples. Results are returned as a pd.DataFrame indexed by sample ID (id):\n\nproperties = ossl.get_properties(['cec_usda.a723_cmolc.kg'], require_complete=True)\n\n\nproperties.head()\n\n\n\n\n\n\n\n\ncec_usda.a723_cmolc.kg\n\n\nid\n\n\n\n\n\nS40857\n6.633217\n\n\nS40858\n3.822628\n\n\nS40859\n3.427324\n\n\nS40860\n1.906545\n\n\nS40861\n13.403203\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nrequire_complete=True ensures that only non null values are returned in selected columns (here cec_usda.a723_cmolc.kg).\n\n\nFor more details on the OSSL dataset and its variables, see the OSSL documentation. Any column name part of the ossl.properties_cols list can be used as a target or metadata variable.\n\nossl.properties_cols\n\n['dataset.code_ascii_txt',\n 'id.layer_local_c',\n 'id.layer_uuid_txt',\n 'id.project_ascii_txt',\n 'id.location_olc_txt',\n 'id.dataset.site_ascii_txt',\n 'id.scan_local_c',\n 'longitude.point_wgs84_dd',\n 'latitude.point_wgs84_dd',\n 'layer.sequence_usda_uint16',\n 'layer.upper.depth_usda_cm',\n 'layer.lower.depth_usda_cm',\n 'observation.date.begin_iso.8601_yyyy.mm.dd',\n 'observation.date.end_iso.8601_yyyy.mm.dd',\n 'surveyor.title_utf8_txt',\n 'layer.texture_usda_txt',\n 'pedon.taxa_usda_txt',\n 'horizon.designation_usda_txt',\n 'longitude.county_wgs84_dd',\n 'latitude.county_wgs84_dd',\n 'location.point.error_any_m',\n 'location.country_iso.3166_txt',\n 'observation.ogc.schema.title_ogc_txt',\n 'observation.ogc.schema_idn_url',\n 'surveyor.contact_ietf_email',\n 'surveyor.address_utf8_txt',\n 'dataset.title_utf8_txt',\n 'dataset.owner_utf8_txt',\n 'dataset.address_idn_url',\n 'dataset.doi_idf_url',\n 'dataset.license.title_ascii_txt',\n 'dataset.license.address_idn_url',\n 'dataset.contact.name_utf8_txt',\n 'dataset.contact_ietf_email',\n 'acidity_usda.a795_cmolc.kg',\n 'aggstb_usda.a1_w.pct',\n 'al.dith_usda.a65_w.pct',\n 'al.ext_aquaregia_g.kg',\n 'al.ext_usda.a1056_mg.kg',\n 'al.ext_usda.a69_cmolc.kg',\n 'al.ox_usda.a59_w.pct',\n 'awc.33.1500kPa_usda.c80_w.frac',\n 'b.ext_mel3_mg.kg',\n 'bd_iso.11272_g.cm3',\n 'bd_usda.a21_g.cm3',\n 'bd_usda.a4_g.cm3',\n 'c.tot_iso.10694_w.pct',\n 'c.tot_usda.a622_w.pct',\n 'ca.ext_aquaregia_mg.kg',\n 'ca.ext_usda.a1059_mg.kg',\n 'ca.ext_usda.a722_cmolc.kg',\n 'caco3_iso.10693_w.pct',\n 'caco3_usda.a54_w.pct',\n 'cec_iso.11260_cmolc.kg',\n 'cec_usda.a723_cmolc.kg',\n 'cf_iso.11464_w.pct',\n 'cf_usda.c236_w.pct',\n 'clay.tot_iso.11277_w.pct',\n 'clay.tot_usda.a334_w.pct',\n 'cu.ext_usda.a1063_mg.kg',\n 'ec_iso.11265_ds.m',\n 'ec_usda.a364_ds.m',\n 'efferv_usda.a479_class',\n 'fe.dith_usda.a66_w.pct',\n 'fe.ext_aquaregia_g.kg',\n 'fe.ext_usda.a1064_mg.kg',\n 'fe.ox_usda.a60_w.pct',\n 'file_sequence',\n 'k.ext_aquaregia_mg.kg',\n 'k.ext_usda.a1065_mg.kg',\n 'k.ext_usda.a725_cmolc.kg',\n 'mg.ext_aquaregia_mg.kg',\n 'mg.ext_usda.a1066_mg.kg',\n 'mg.ext_usda.a724_cmolc.kg',\n 'mn.ext_aquaregia_mg.kg',\n 'mn.ext_usda.a1067_mg.kg',\n 'mn.ext_usda.a70_mg.kg',\n 'n.tot_iso.11261_w.pct',\n 'n.tot_iso.13878_w.pct',\n 'n.tot_usda.a623_w.pct',\n 'na.ext_aquaregia_mg.kg',\n 'na.ext_usda.a1068_mg.kg',\n 'na.ext_usda.a726_cmolc.kg',\n 'oc_iso.10694_w.pct',\n 'oc_usda.c1059_w.pct',\n 'oc_usda.c729_w.pct',\n 'p.ext_aquaregia_mg.kg',\n 'p.ext_iso.11263_mg.kg',\n 'p.ext_usda.a1070_mg.kg',\n 'p.ext_usda.a270_mg.kg',\n 'p.ext_usda.a274_mg.kg',\n 'p.ext_usda.a652_mg.kg',\n 'ph.cacl2_iso.10390_index',\n 'ph.cacl2_usda.a477_index',\n 'ph.cacl2_usda.a481_index',\n 'ph.h2o_iso.10390_index',\n 'ph.h2o_usda.a268_index',\n 's.ext_mel3_mg.kg',\n 's.tot_usda.a624_w.pct',\n 'sand.tot_iso.11277_w.pct',\n 'sand.tot_usda.c405_w.pct',\n 'sand.tot_usda.c60_w.pct',\n 'silt.tot_iso.11277_w.pct',\n 'silt.tot_usda.c407_w.pct',\n 'silt.tot_usda.c62_w.pct',\n 'wr.10kPa_usda.a414_w.pct',\n 'wr.10kPa_usda.a8_w.pct',\n 'wr.1500kPa_usda.a417_w.pct',\n 'wr.33kPa_usda.a415_w.pct',\n 'wr.33kPa_usda.a9_w.pct',\n 'zn.ext_usda.a1073_mg.kg',\n 'scan.mir.date.begin_iso.8601_yyyy.mm.dd',\n 'scan.mir.date.end_iso.8601_yyyy.mm.dd',\n 'scan.mir.model.name_utf8_txt',\n 'scan.mir.model.code_any_txt',\n 'scan.mir.method.optics_any_txt',\n 'scan.mir.method.preparation_any_txt',\n 'scan.mir.license.title_ascii_txt',\n 'scan.mir.license.address_idn_url',\n 'scan.mir.doi_idf_url',\n 'scan.mir.contact.name_utf8_txt',\n 'scan.mir.contact.email_ietf_txt',\n 'scan.visnir.date.begin_iso.8601_yyyy.mm.dd',\n 'scan.visnir.date.end_iso.8601_yyyy.mm.dd',\n 'scan.visnir.model.name_utf8_txt',\n 'scan.visnir.model.code_any_txt',\n 'scan.visnir.method.optics_any_txt',\n 'scan.visnir.method.preparation_any_txt',\n 'scan.visnir.license.title_ascii_txt',\n 'scan.visnir.license.address_idn_url',\n 'scan.visnir.doi_idf_url',\n 'scan.visnir.contact.name_utf8_txt',\n 'scan.visnir.contact.email_ietf_txt']\n\n\n\nGet metadata (e.g., geographical coordinates):\n\n\nmetadata = ossl.get_properties(['longitude.point_wgs84_dd', 'latitude.point_wgs84_dd'], require_complete=False)\n\n\n\nPreparing data for machine learning pipeline\nTo get directly aligned spectra and target variable(s):\n\nX, y, ids = ossl.get_aligned_data(\n    spectra_data=mir_data,\n    target_cols='cec_usda.a723_cmolc.kg'\n)\n\nX.shape, y.shape, ids.shape\n\n((57064, 1701), (57064, 1), (57064,))\n\n\nAnd plot the first 20 MIR spectra:\n\nfrom matplotlib import pyplot as plt\n\nplt.figure(figsize=(12, 3))\nplt.plot(mir_data.wavenumbers, mir_data.spectra[:20,:].T, alpha=0.3, color='steelblue', lw=1)\nplt.gca().invert_xaxis()\nplt.grid(True, linestyle='--', alpha=0.7)\n\nplt.xlabel('Wavenumber (cm⁻¹)')\nplt.ylabel('Absorbance');",
    "crumbs": [
      "SoilSpecData"
    ]
  },
  {
    "objectID": "index.html#data-structure",
    "href": "index.html#data-structure",
    "title": "SoilSpecData",
    "section": "Data Structure",
    "text": "Data Structure\nThe package returns spectra data in a structured format containing:\n\nWavenumbers\nSpectra measurements\nMeasurement type (reflectance/absorbance)\nSample IDs\n\nProperties and metadata are returned as pandas DataFrames indexed by sample ID.",
    "crumbs": [
      "SoilSpecData"
    ]
  },
  {
    "objectID": "index.html#cache-management",
    "href": "index.html#cache-management",
    "title": "SoilSpecData",
    "section": "Cache Management",
    "text": "Cache Management\nBy default, the OSSL dataset is cached in ~/.soilspecdata/. To force a fresh download:\nossl = get_ossl(force_download=True)",
    "crumbs": [
      "SoilSpecData"
    ]
  },
  {
    "objectID": "index.html#contributing",
    "href": "index.html#contributing",
    "title": "SoilSpecData",
    "section": "Contributing",
    "text": "Contributing\nContributions are welcome! Please feel free to submit a Pull Request.",
    "crumbs": [
      "SoilSpecData"
    ]
  },
  {
    "objectID": "index.html#license",
    "href": "index.html#license",
    "title": "SoilSpecData",
    "section": "License",
    "text": "License\nApache2",
    "crumbs": [
      "SoilSpecData"
    ]
  },
  {
    "objectID": "index.html#citations",
    "href": "index.html#citations",
    "title": "SoilSpecData",
    "section": "Citation(s)",
    "text": "Citation(s)\n\nOSSL Library: Safanelli, J.L., Hengl, T., Parente, L.L., Minarik, R., Bloom, D.E., Todd-Brown, K., Gholizadeh, A., Mendes, W. de S., Sanderman, J., 2025. Open Soil Spectral Library (OSSL): Building reproducible soil calibration models through open development and community engagement. PLOS ONE 20, e0296545. https://doi.org/10.1371/journal.pone.0296545",
    "crumbs": [
      "SoilSpecData"
    ]
  }
]